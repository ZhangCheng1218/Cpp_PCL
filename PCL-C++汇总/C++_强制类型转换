https://blog.csdn.net/u010540025/article/details/81231495?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control

--------------------------------------------C风格的强制转换----------------------------------
TypeName b=(TypeName) a;
C++支持C风格的强制转换，但可能带来隐患；

-----------------------------------------------const_cast------------------------------------
const int* p;//p可变，p指向的内容不可变
int const* p;//p可变，p指向的内容不可变
int*const p;//p不可变，p指向的内容可变

const修饰函数返回值表示返回值不可改变,多用于返回指针的情形
volatile可理解为编译器警告指示字
volatile用于告诉编译器必须每次去内存中取变量值
volatile主要修饰可能被多个线程访问的变量
volatile也可以修饰可能被未知因数更改的变量

1、常量指针被转化成非常量的指针，并且仍然指向原来的对象； 
2、常量引用被转换成非常量的引用，并且仍然指向原来的对象； 
3、const_cast一般用于修改指针。如const char *p形式；
--------------------------------------------static_cast---------------------------------------
1、static_cast 作用和C语言风格强制转换的效果基本一样，由于没有运行时类型检查来保证转换的安全性，所以这类型的强制转换和C语言风格的强制转换都有安全隐患。 
2、用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。注意：进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；
进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。
3、用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性需要开发者来维护。  
4、static_cast不能转换掉原有类型的const、volatile、或者 __unaligned属性。(前两种可以使用const_cast 来去除)  
5、在c++ primer 中说道：c++ 的任何的隐式转换都是使用 static_cast 来实现。

dynamic_cast
reinterpret_cast
