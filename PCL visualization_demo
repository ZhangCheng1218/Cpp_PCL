

#include <iostream>
#include<pcl\io\pcd_io.h>
#include<pcl\point_types.h>
#include<pcl\ModelCoefficients.h>
#include<pcl\filters\project_inliers.h>
#include<pcl\visualization\pcl_visualizer.h>

int main(int argc, char** argv)
{
	/*pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_projected(new pcl::PointCloud<pcl::PointXYZ>);

	cloud->width = 5;
	cloud->height = 1;
	cloud->points.resize(cloud->width * cloud->height);
	for (size_t i = 0; i < cloud->width * cloud->height; ++i)
	{
		cloud->points[i].x = 1024 * rand() / (RAND_MAX + 1.0f);
		cloud->points[i].y = 1024 * rand() / (RAND_MAX + 1.0f);
		cloud->points[i].z = 1024 * rand() / (RAND_MAX + 1.0f);
	}
	std::cout << "Cloud before projection" << std::endl;
	for (size_t i = 0; i < cloud->points.size(); ++i)
	{
		std::cout
			<< "    " << cloud->points[i].x
			<< "    " << cloud->points[i].y
			<< "    " << cloud->points[i].z
			<< "    " << std::endl;
	}

	pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients());
	coefficients->values.resize(4);
	coefficients->values[0] = coefficients->values[1] = 0;
	coefficients->values[2] = 1.0;
	coefficients->values[3] = 0;

	pcl::ProjectInliers<pcl::PointXYZ> proj;
	proj.setModelType(pcl::SACMODEL_PLANE);
	proj.setInputCloud(cloud);
	proj.setModelCoefficients(coefficients);
	proj.filter(*cloud_projected);
	std::cout << "Cloud after projection" << std::endl;
	for (size_t i = 0; i < cloud_projected->points.size(); ++i)
	{
		std::cout
			<< "	" << cloud_projected->points[i].x
			<< "	" << cloud_projected->points[i].y
			<< "	" << cloud_projected->points[i].z
			<< "	" << std::endl;
	}
	system("pause");
	return 0;*/

	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
	cloud->points.resize(500);
	for (size_t i = 0; i < cloud->points.size(); ++i)
	{
		cloud->points[i].x = 1024 * rand() / (RAND_MAX + 1.0f);
		cloud->points[i].y = 1024 * rand() / (RAND_MAX + 1.0f);
		cloud->points[i].z = 1024 * rand() / (RAND_MAX + 1.0f);
	}
	//声明视窗
	boost::shared_ptr<pcl::visualization::PCLVisualizer > viewer(new pcl::visualization::PCLVisualizer("3D Viewer"));
	//设置背景色
	viewer->setBackgroundColor(1.0f, 0.5f, 1.0f);
	//预处理点云颜色
	pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> megenta(cloud,255,255,255);
	//把点云加载到视窗
	viewer->addPointCloud(cloud, megenta, "cloud");
	//设置点云大小
	viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,2,"cloud");
	//显示
	viewer->spin();
	system("pause");
	return 0;
}

报错：
1.重新生成不报错，但是ctrl+F5后报错，由于找不到xxxx.dll，无法继续执行代码，重新安装可能解决；--------把缺少的dll直接拷贝到基目录下面；
2.报错 LNK2001 无法解析的外部符号（具体如下）；---------------------------------------------------多半是lib有点问题，属性-链接器-输入-附加依赖项  中追加.lib的文件名（结合Github -获取文件名）；
严重性	代码	说明	项目	文件	行	禁止显示状态
错误	LNK2001	无法解析的外部符号 "__declspec(dllimport) public: void __cdecl vtkProp3D::SetUserMatrix(class vtkMatrix4x4 *)"
(__imp_?SetUserMatrix@vtkProp3D@@QEAAXPEAVvtkMatrix4x4@@@Z)	PCL_1	C:\Users\Administrator\Documents\C++_PCL\PCL_1\PCL_1\PCL_1.obj	1	

