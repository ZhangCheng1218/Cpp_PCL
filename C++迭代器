迭代器是一个变量，相当于容器和操作容器的算法之间的中介。迭代器可以指向容器中的某个元素，通过迭代器可以读写它指向的元素。
迭代器按定义分为：正向迭代器（容器类名::iterator 迭代器名）、常量正向迭代器（容器类名::const_iterator 迭代器名）、反向迭代器（容器类名::reverse_iterator 迭代器名）、常量反向迭代器（容器类名::const_reverse_iterator 迭代器名）；
通过迭代器可以读取它指向的元素， *迭代器名  就表示迭代器指向的元素。通过非常量迭代器还能修改其指向的元素。
迭代器都可以进行++操作。反向迭代器和正向迭代器的区别在于：
    对正向迭代器进行++操作时，迭代器会指向容器中的后一个元素；
    而对反向迭代器进行++操作时，迭代器会指向容器中的前一个元素。
    
    
#include <iostream>
#include <vector>
using namespace std;
int main()
{
    vector<int> v;  //v是存放int类型变量的可变长数组，开始时没有元素
    for (int n = 0; n<5; ++n)
        v.push_back(n);  //push_back成员函数在vector容器尾部添加一个元素
    vector<int>::iterator i;  //定义正向迭代器
    for (i = v.begin(); i != v.end(); ++i) {  //用迭代器遍历容器
        cout << *i << " ";  //*i 就是迭代器i指向的元素
        *i *= 2;  //每个元素变为原来的2倍
    }
    cout << endl;
    //用反向迭代器遍历容器
    for (vector<int>::reverse_iterator j = v.rbegin(); j != v.rend(); ++j)
        cout << *j << " ";
    return 0;
}

前置++比后置++，程序执行速度更快，++重载可以看到，后置会记录一下；
不同容器的迭代器功能
vector   随机访问
deque    随机访问
list     双向
set/multiset 双向
map/multimap 双向
stack 不支持迭代器
queue 不支持迭代器
priority_queue 不支持迭代器
